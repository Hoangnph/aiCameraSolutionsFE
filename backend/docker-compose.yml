version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: people_counting_db
    environment:
      POSTGRES_DB: people_counting_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Authentication Service
  auth_service:
    build: .
    container_name: auth_service
    environment:
      NODE_ENV: development
      PORT: 3001
      API_VERSION: v1
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: people_counting_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_SSL: false
      JWT_SECRET: your_super_secret_jwt_key_here_development
      JWT_ACCESS_TOKEN_EXPIRY: 15m
      JWT_REFRESH_TOKEN_EXPIRY: 7d
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    volumes:
      - ./logs:/app/logs
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    restart: unless-stopped
    command: npm run dev

  # Redis (for session storage - optional)
  redis:
    image: redis:7-alpine
    container_name: auth_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  auth_network:
    driver: bridge 