{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\nclass AuthAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Helper method to make API calls\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        var _data$error;\n        // Handle token refresh if 401\n        if (response.status === 401 && endpoint !== '/auth/refresh') {\n          const refreshResult = await this.refreshToken();\n          if (refreshResult.success) {\n            // Retry the original request with new token\n            config.headers.Authorization = `Bearer ${localStorage.getItem('accessToken')}`;\n            const retryResponse = await fetch(url, config);\n            const retryData = await retryResponse.json();\n            if (!retryResponse.ok) {\n              var _retryData$error;\n              throw new Error(((_retryData$error = retryData.error) === null || _retryData$error === void 0 ? void 0 : _retryData$error.message) || 'Request failed');\n            }\n            return retryData;\n          } else {\n            // Refresh failed, redirect to login\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            window.location.href = '/authentication/sign-in';\n            throw new Error('Session expired. Please login again.');\n          }\n        }\n        throw new Error(((_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || 'Request failed');\n      }\n      return data;\n    } catch (error) {\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Network error. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n\n  // Login user\n  async login(credentials) {\n    const response = await this.makeRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n    if (response.success && response.data) {\n      return {\n        user: response.data.user,\n        accessToken: response.data.accessToken,\n        refreshToken: response.data.refreshToken\n      };\n    }\n    throw new Error('Login failed');\n  }\n\n  // Register user\n  async register(userData) {\n    const response = await this.makeRequest('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n    if (response.success && response.data) {\n      return {\n        user: response.data.user,\n        accessToken: response.data.accessToken,\n        refreshToken: response.data.refreshToken\n      };\n    }\n    throw new Error('Registration failed');\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      await this.makeRequest('/auth/logout', {\n        method: 'POST'\n      });\n    } catch (error) {\n      // Even if logout API fails, we still want to clear local storage\n      console.error('Logout API error:', error);\n    }\n  }\n\n  // Get current user\n  async getCurrentUser() {\n    const response = await this.makeRequest('/auth/me');\n    if (response.success && response.data) {\n      return response.data.user;\n    }\n    throw new Error('Failed to get user data');\n  }\n\n  // Refresh token\n  async refreshToken() {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      return {\n        success: false\n      };\n    }\n    try {\n      const response = await this.makeRequest('/auth/refresh', {\n        method: 'POST',\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (response.success && response.data) {\n        localStorage.setItem('accessToken', response.data.accessToken);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n    }\n    return {\n      success: false\n    };\n  }\n\n  // Forgot password\n  async forgotPassword(email) {\n    const response = await this.makeRequest('/auth/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (response.success) {\n      return {\n        success: true,\n        message: response.message\n      };\n    }\n    throw new Error('Failed to send reset email');\n  }\n\n  // Reset password\n  async resetPassword(token, password) {\n    const response = await this.makeRequest('/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        token,\n        password\n      })\n    });\n    if (response.success) {\n      return {\n        success: true,\n        message: response.message\n      };\n    }\n    throw new Error('Failed to reset password');\n  }\n\n  // Update user profile\n  async updateProfile(profileData) {\n    const response = await this.makeRequest('/users/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n    if (response.success && response.data) {\n      return response.data.user;\n    }\n    throw new Error('Failed to update profile');\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    const response = await this.makeRequest('/users/change-password', {\n      method: 'PUT',\n      body: JSON.stringify(passwordData)\n    });\n    if (response.success) {\n      return {\n        success: true,\n        message: response.message\n      };\n    }\n    throw new Error('Failed to change password');\n  }\n}\nexport const authAPI = new AuthAPI();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AuthAPI","constructor","baseURL","makeRequest","endpoint","options","url","config","headers","token","localStorage","getItem","Authorization","response","fetch","data","json","ok","_data$error","status","refreshResult","refreshToken","success","retryResponse","retryData","_retryData$error","Error","error","message","removeItem","window","location","href","name","includes","login","credentials","method","body","JSON","stringify","user","accessToken","register","userData","logout","console","getCurrentUser","setItem","forgotPassword","email","resetPassword","password","updateProfile","profileData","changePassword","passwordData","authAPI"],"sources":["/Users/macintoshhd/Project/Project/AI_OCR/feMain/src/services/authAPI.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\n\nclass AuthAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Helper method to make API calls\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Handle token refresh if 401\n        if (response.status === 401 && endpoint !== '/auth/refresh') {\n          const refreshResult = await this.refreshToken();\n          if (refreshResult.success) {\n            // Retry the original request with new token\n            config.headers.Authorization = `Bearer ${localStorage.getItem('accessToken')}`;\n            const retryResponse = await fetch(url, config);\n            const retryData = await retryResponse.json();\n            \n            if (!retryResponse.ok) {\n              throw new Error(retryData.error?.message || 'Request failed');\n            }\n            return retryData;\n          } else {\n            // Refresh failed, redirect to login\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            window.location.href = '/authentication/sign-in';\n            throw new Error('Session expired. Please login again.');\n          }\n        }\n        \n        throw new Error(data.error?.message || 'Request failed');\n      }\n\n      return data;\n    } catch (error) {\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Network error. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n\n  // Login user\n  async login(credentials) {\n    const response = await this.makeRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n\n    if (response.success && response.data) {\n      return {\n        user: response.data.user,\n        accessToken: response.data.accessToken,\n        refreshToken: response.data.refreshToken,\n      };\n    }\n    \n    throw new Error('Login failed');\n  }\n\n  // Register user\n  async register(userData) {\n    const response = await this.makeRequest('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n\n    if (response.success && response.data) {\n      return {\n        user: response.data.user,\n        accessToken: response.data.accessToken,\n        refreshToken: response.data.refreshToken,\n      };\n    }\n    \n    throw new Error('Registration failed');\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      await this.makeRequest('/auth/logout', {\n        method: 'POST',\n      });\n    } catch (error) {\n      // Even if logout API fails, we still want to clear local storage\n      console.error('Logout API error:', error);\n    }\n  }\n\n  // Get current user\n  async getCurrentUser() {\n    const response = await this.makeRequest('/auth/me');\n    \n    if (response.success && response.data) {\n      return response.data.user;\n    }\n    \n    throw new Error('Failed to get user data');\n  }\n\n  // Refresh token\n  async refreshToken() {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      return { success: false };\n    }\n\n    try {\n      const response = await this.makeRequest('/auth/refresh', {\n        method: 'POST',\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      if (response.success && response.data) {\n        localStorage.setItem('accessToken', response.data.accessToken);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        return { success: true };\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n    }\n\n    return { success: false };\n  }\n\n  // Forgot password\n  async forgotPassword(email) {\n    const response = await this.makeRequest('/auth/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({ email }),\n    });\n\n    if (response.success) {\n      return { success: true, message: response.message };\n    }\n    \n    throw new Error('Failed to send reset email');\n  }\n\n  // Reset password\n  async resetPassword(token, password) {\n    const response = await this.makeRequest('/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({ token, password }),\n    });\n\n    if (response.success) {\n      return { success: true, message: response.message };\n    }\n    \n    throw new Error('Failed to reset password');\n  }\n\n  // Update user profile\n  async updateProfile(profileData) {\n    const response = await this.makeRequest('/users/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData),\n    });\n\n    if (response.success && response.data) {\n      return response.data.user;\n    }\n    \n    throw new Error('Failed to update profile');\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    const response = await this.makeRequest('/users/change-password', {\n      method: 'PUT',\n      body: JSON.stringify(passwordData),\n    });\n\n    if (response.success) {\n      return { success: true, message: response.message };\n    }\n    \n    throw new Error('Failed to change password');\n  }\n}\n\nexport const authAPI = new AuthAPI(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}