{"ast":null,"code":"const CAMERA_API_BASE_URL = process.env.REACT_APP_CAMERA_API_URL || 'http://localhost:3002/api/v1';\nclass CameraAPI {\n  constructor() {\n    this.baseURL = CAMERA_API_BASE_URL;\n  }\n\n  // Helper method to make API calls\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw {\n          status: response.status,\n          ...data\n        };\n      }\n      return data;\n    } catch (error) {\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Network error. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n\n  // Get all cameras\n  async getCameras() {\n    const response = await this.makeRequest('/cameras');\n    if (response.success) {\n      return response.data;\n    }\n    throw new Error('Failed to get cameras');\n  }\n\n  // Create a new camera\n  async createCamera(cameraData) {\n    const response = await this.makeRequest('/cameras', {\n      method: 'POST',\n      body: JSON.stringify(cameraData)\n    });\n    if (response.success) {\n      return response.data;\n    }\n    throw new Error('Failed to create camera');\n  }\n\n  // Get camera by ID\n  async getCameraById(cameraId) {\n    const response = await this.makeRequest(`/cameras/${cameraId}`);\n    if (response.success) {\n      return response.data;\n    }\n    throw new Error('Failed to get camera');\n  }\n\n  // Update camera\n  async updateCamera(cameraId, cameraData) {\n    const response = await this.makeRequest(`/cameras/${cameraId}`, {\n      method: 'PUT',\n      body: JSON.stringify(cameraData)\n    });\n    if (response.success) {\n      return response.data;\n    }\n    throw new Error('Failed to update camera');\n  }\n\n  // Delete camera\n  async deleteCamera(cameraId) {\n    const response = await this.makeRequest(`/cameras/${cameraId}`, {\n      method: 'DELETE'\n    });\n    if (response.success) {\n      return {\n        success: true,\n        message: response.message\n      };\n    }\n    throw new Error('Failed to delete camera');\n  }\n\n  // Get count data\n  async getCountData(cameraId = null, limit = 100) {\n    let endpoint = `/counts?limit=${limit}`;\n    if (cameraId) {\n      endpoint += `&camera_id=${cameraId}`;\n    }\n    const response = await this.makeRequest(endpoint);\n    if (response.success) {\n      return response.data;\n    }\n    throw new Error('Failed to get count data');\n  }\n\n  // Get analytics summary\n  async getAnalyticsSummary() {\n    const response = await this.makeRequest('/analytics/summary');\n    if (response.success) {\n      return response.data;\n    }\n    throw new Error('Failed to get analytics summary');\n  }\n\n  // Get real-time count updates (WebSocket)\n  async getRealTimeCounts(cameraId) {\n    // This would typically use WebSocket connection\n    // For now, return a promise that resolves with mock data\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          camera_id: cameraId,\n          people_in: Math.floor(Math.random() * 10),\n          people_out: Math.floor(Math.random() * 8),\n          current_count: Math.floor(Math.random() * 20),\n          confidence: 0.85 + Math.random() * 0.1,\n          timestamp: new Date().toISOString()\n        });\n      }, 1000);\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await fetch(`${this.baseURL.replace('/api/v1', '')}/health`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Camera service health check failed');\n    }\n  }\n}\nexport const cameraAPI = new CameraAPI();","map":{"version":3,"names":["CAMERA_API_BASE_URL","process","env","REACT_APP_CAMERA_API_URL","CameraAPI","constructor","baseURL","makeRequest","endpoint","options","url","config","headers","token","localStorage","getItem","Authorization","response","fetch","data","json","ok","status","error","name","message","includes","Error","getCameras","success","createCamera","cameraData","method","body","JSON","stringify","getCameraById","cameraId","updateCamera","deleteCamera","getCountData","limit","getAnalyticsSummary","getRealTimeCounts","Promise","resolve","setTimeout","camera_id","people_in","Math","floor","random","people_out","current_count","confidence","timestamp","Date","toISOString","healthCheck","replace","cameraAPI"],"sources":["/Users/macintoshhd/Project/Project/AI_OCR/feMain/src/services/cameraAPI.js"],"sourcesContent":["const CAMERA_API_BASE_URL = process.env.REACT_APP_CAMERA_API_URL || 'http://localhost:3002/api/v1';\n\nclass CameraAPI {\n  constructor() {\n    this.baseURL = CAMERA_API_BASE_URL;\n  }\n\n  // Helper method to make API calls\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw { status: response.status, ...data };\n      }\n\n      return data;\n    } catch (error) {\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Network error. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n\n  // Get all cameras\n  async getCameras() {\n    const response = await this.makeRequest('/cameras');\n    \n    if (response.success) {\n      return response.data;\n    }\n    \n    throw new Error('Failed to get cameras');\n  }\n\n  // Create a new camera\n  async createCamera(cameraData) {\n    const response = await this.makeRequest('/cameras', {\n      method: 'POST',\n      body: JSON.stringify(cameraData),\n    });\n\n    if (response.success) {\n      return response.data;\n    }\n    \n    throw new Error('Failed to create camera');\n  }\n\n  // Get camera by ID\n  async getCameraById(cameraId) {\n    const response = await this.makeRequest(`/cameras/${cameraId}`);\n    \n    if (response.success) {\n      return response.data;\n    }\n    \n    throw new Error('Failed to get camera');\n  }\n\n  // Update camera\n  async updateCamera(cameraId, cameraData) {\n    const response = await this.makeRequest(`/cameras/${cameraId}`, {\n      method: 'PUT',\n      body: JSON.stringify(cameraData),\n    });\n\n    if (response.success) {\n      return response.data;\n    }\n    \n    throw new Error('Failed to update camera');\n  }\n\n  // Delete camera\n  async deleteCamera(cameraId) {\n    const response = await this.makeRequest(`/cameras/${cameraId}`, {\n      method: 'DELETE',\n    });\n\n    if (response.success) {\n      return { success: true, message: response.message };\n    }\n    \n    throw new Error('Failed to delete camera');\n  }\n\n  // Get count data\n  async getCountData(cameraId = null, limit = 100) {\n    let endpoint = `/counts?limit=${limit}`;\n    if (cameraId) {\n      endpoint += `&camera_id=${cameraId}`;\n    }\n    \n    const response = await this.makeRequest(endpoint);\n    \n    if (response.success) {\n      return response.data;\n    }\n    \n    throw new Error('Failed to get count data');\n  }\n\n  // Get analytics summary\n  async getAnalyticsSummary() {\n    const response = await this.makeRequest('/analytics/summary');\n    \n    if (response.success) {\n      return response.data;\n    }\n    \n    throw new Error('Failed to get analytics summary');\n  }\n\n  // Get real-time count updates (WebSocket)\n  async getRealTimeCounts(cameraId) {\n    // This would typically use WebSocket connection\n    // For now, return a promise that resolves with mock data\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          camera_id: cameraId,\n          people_in: Math.floor(Math.random() * 10),\n          people_out: Math.floor(Math.random() * 8),\n          current_count: Math.floor(Math.random() * 20),\n          confidence: 0.85 + Math.random() * 0.1,\n          timestamp: new Date().toISOString()\n        });\n      }, 1000);\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await fetch(`${this.baseURL.replace('/api/v1', '')}/health`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw new Error('Camera service health check failed');\n    }\n  }\n}\n\nexport const cameraAPI = new CameraAPI(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}