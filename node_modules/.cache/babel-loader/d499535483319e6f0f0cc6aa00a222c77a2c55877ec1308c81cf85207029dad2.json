{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\nclass AuthAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Helper method to make API calls\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        // Handle token refresh if 401\n        if (response.status === 401 && endpoint !== '/auth/refresh') {\n          const refreshResult = await this.refreshToken();\n          if (refreshResult.success) {\n            config.headers.Authorization = `Bearer ${localStorage.getItem('accessToken')}`;\n            const retryResponse = await fetch(url, config);\n            const retryData = await retryResponse.json();\n            if (!retryResponse.ok) {\n              throw {\n                status: retryResponse.status,\n                ...retryData\n              };\n            }\n            return retryData;\n          } else {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            window.location.href = '/authentication/sign-in';\n            throw {\n              status: 401,\n              message: 'Session expired. Please login again.'\n            };\n          }\n        }\n        // Throw toàn bộ object lỗi backend\n        throw {\n          status: response.status,\n          ...data\n        };\n      }\n      return data;\n    } catch (error) {\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Network error. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n\n  // Login user\n  async login(credentials) {\n    const response = await this.makeRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n    if (response.success && response.data) {\n      return {\n        user: response.data.user,\n        accessToken: response.data.accessToken,\n        refreshToken: response.data.refreshToken\n      };\n    }\n    throw new Error('Login failed');\n  }\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await this.makeRequest('/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(userData)\n      });\n      return response;\n    } catch (error) {\n      // Just throw the error without console logging\n      throw error;\n    }\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      await this.makeRequest('/auth/logout', {\n        method: 'POST'\n      });\n    } catch (error) {\n      // Even if logout API fails, we still want to clear local storage\n      console.error('Logout API error:', error);\n    }\n  }\n\n  // Get current user\n  async getCurrentUser() {\n    const response = await this.makeRequest('/auth/me');\n    if (response.success && response.data) {\n      return response.data.user;\n    }\n    throw new Error('Failed to get user data');\n  }\n\n  // Refresh token\n  async refreshToken() {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      return {\n        success: false\n      };\n    }\n    try {\n      const response = await this.makeRequest('/auth/refresh', {\n        method: 'POST',\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (response.success && response.data) {\n        localStorage.setItem('accessToken', response.data.accessToken);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n    }\n    return {\n      success: false\n    };\n  }\n\n  // Forgot password\n  async forgotPassword(email) {\n    const response = await this.makeRequest('/auth/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n    if (response.success) {\n      return {\n        success: true,\n        message: response.message\n      };\n    }\n    throw new Error('Failed to send reset email');\n  }\n\n  // Reset password\n  async resetPassword(token, password) {\n    const response = await this.makeRequest('/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        token,\n        password\n      })\n    });\n    if (response.success) {\n      return {\n        success: true,\n        message: response.message\n      };\n    }\n    throw new Error('Failed to reset password');\n  }\n\n  // Update user profile\n  async updateProfile(profileData) {\n    const response = await this.makeRequest('/users/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n    if (response.success && response.data) {\n      return response.data.user;\n    }\n    throw new Error('Failed to update profile');\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    const response = await this.makeRequest('/users/change-password', {\n      method: 'PUT',\n      body: JSON.stringify(passwordData)\n    });\n    if (response.success) {\n      return {\n        success: true,\n        message: response.message\n      };\n    }\n    throw new Error('Failed to change password');\n  }\n}\nexport const authAPI = new AuthAPI();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AuthAPI","constructor","baseURL","makeRequest","endpoint","options","url","config","headers","token","localStorage","getItem","Authorization","response","fetch","data","json","ok","status","refreshResult","refreshToken","success","retryResponse","retryData","removeItem","window","location","href","message","error","name","includes","Error","login","credentials","method","body","JSON","stringify","user","accessToken","register","userData","logout","console","getCurrentUser","setItem","forgotPassword","email","resetPassword","password","updateProfile","profileData","changePassword","passwordData","authAPI"],"sources":["/Users/macintoshhd/Project/Project/AI_OCR/feMain/src/services/authAPI.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\n\nclass AuthAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Helper method to make API calls\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Handle token refresh if 401\n        if (response.status === 401 && endpoint !== '/auth/refresh') {\n          const refreshResult = await this.refreshToken();\n          if (refreshResult.success) {\n            config.headers.Authorization = `Bearer ${localStorage.getItem('accessToken')}`;\n            const retryResponse = await fetch(url, config);\n            const retryData = await retryResponse.json();\n            if (!retryResponse.ok) {\n              throw { status: retryResponse.status, ...retryData };\n            }\n            return retryData;\n          } else {\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            window.location.href = '/authentication/sign-in';\n            throw { status: 401, message: 'Session expired. Please login again.' };\n          }\n        }\n        // Throw toàn bộ object lỗi backend\n        throw { status: response.status, ...data };\n      }\n\n      return data;\n    } catch (error) {\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('Network error. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n\n  // Login user\n  async login(credentials) {\n    const response = await this.makeRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n\n    if (response.success && response.data) {\n      return {\n        user: response.data.user,\n        accessToken: response.data.accessToken,\n        refreshToken: response.data.refreshToken,\n      };\n    }\n    \n    throw new Error('Login failed');\n  }\n\n  // Register user\n  async register(userData) {\n    try {\n      const response = await this.makeRequest('/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(userData),\n      });\n      return response;\n    } catch (error) {\n      // Just throw the error without console logging\n      throw error;\n    }\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      await this.makeRequest('/auth/logout', {\n        method: 'POST',\n      });\n    } catch (error) {\n      // Even if logout API fails, we still want to clear local storage\n      console.error('Logout API error:', error);\n    }\n  }\n\n  // Get current user\n  async getCurrentUser() {\n    const response = await this.makeRequest('/auth/me');\n    \n    if (response.success && response.data) {\n      return response.data.user;\n    }\n    \n    throw new Error('Failed to get user data');\n  }\n\n  // Refresh token\n  async refreshToken() {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      return { success: false };\n    }\n\n    try {\n      const response = await this.makeRequest('/auth/refresh', {\n        method: 'POST',\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      if (response.success && response.data) {\n        localStorage.setItem('accessToken', response.data.accessToken);\n        localStorage.setItem('refreshToken', response.data.refreshToken);\n        return { success: true };\n      }\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n    }\n\n    return { success: false };\n  }\n\n  // Forgot password\n  async forgotPassword(email) {\n    const response = await this.makeRequest('/auth/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({ email }),\n    });\n\n    if (response.success) {\n      return { success: true, message: response.message };\n    }\n    \n    throw new Error('Failed to send reset email');\n  }\n\n  // Reset password\n  async resetPassword(token, password) {\n    const response = await this.makeRequest('/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({ token, password }),\n    });\n\n    if (response.success) {\n      return { success: true, message: response.message };\n    }\n    \n    throw new Error('Failed to reset password');\n  }\n\n  // Update user profile\n  async updateProfile(profileData) {\n    const response = await this.makeRequest('/users/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData),\n    });\n\n    if (response.success && response.data) {\n      return response.data.user;\n    }\n    \n    throw new Error('Failed to update profile');\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    const response = await this.makeRequest('/users/change-password', {\n      method: 'PUT',\n      body: JSON.stringify(passwordData),\n    });\n\n    if (response.success) {\n      return { success: true, message: response.message };\n    }\n    \n    throw new Error('Failed to change password');\n  }\n}\n\nexport const authAPI = new AuthAPI(); "],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;AAEpF,MAAMC,OAAO,CAAC;EACZC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGN,YAAY;EAC7B;;EAEA;EACA,MAAMO,WAAWA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,GAAGE,QAAQ,EAAE;IAExC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;;IAED;IACA,MAAMI,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,IAAIF,KAAK,EAAE;MACTF,MAAM,CAACC,OAAO,CAACI,aAAa,GAAG,UAAUH,KAAK,EAAE;IAClD;IAEA,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAEC,MAAM,CAAC;MACzC,MAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB;QACA,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAId,QAAQ,KAAK,eAAe,EAAE;UAC3D,MAAMe,aAAa,GAAG,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;UAC/C,IAAID,aAAa,CAACE,OAAO,EAAE;YACzBd,MAAM,CAACC,OAAO,CAACI,aAAa,GAAG,UAAUF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAE;YAC9E,MAAMW,aAAa,GAAG,MAAMR,KAAK,CAACR,GAAG,EAAEC,MAAM,CAAC;YAC9C,MAAMgB,SAAS,GAAG,MAAMD,aAAa,CAACN,IAAI,CAAC,CAAC;YAC5C,IAAI,CAACM,aAAa,CAACL,EAAE,EAAE;cACrB,MAAM;gBAAEC,MAAM,EAAEI,aAAa,CAACJ,MAAM;gBAAE,GAAGK;cAAU,CAAC;YACtD;YACA,OAAOA,SAAS;UAClB,CAAC,MAAM;YACLb,YAAY,CAACc,UAAU,CAAC,aAAa,CAAC;YACtCd,YAAY,CAACc,UAAU,CAAC,cAAc,CAAC;YACvCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,yBAAyB;YAChD,MAAM;cAAET,MAAM,EAAE,GAAG;cAAEU,OAAO,EAAE;YAAuC,CAAC;UACxE;QACF;QACA;QACA,MAAM;UAAEV,MAAM,EAAEL,QAAQ,CAACK,MAAM;UAAE,GAAGH;QAAK,CAAC;MAC5C;MAEA,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOc,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,IAAI,KAAK,WAAW,IAAID,KAAK,CAACD,OAAO,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE;QACjE,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;MACjE;MACA,MAAMH,KAAK;IACb;EACF;;EAEA;EACA,MAAMI,KAAKA,CAACC,WAAW,EAAE;IACvB,MAAMrB,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAAC,aAAa,EAAE;MACrDgC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;IAClC,CAAC,CAAC;IAEF,IAAIrB,QAAQ,CAACQ,OAAO,IAAIR,QAAQ,CAACE,IAAI,EAAE;MACrC,OAAO;QACLwB,IAAI,EAAE1B,QAAQ,CAACE,IAAI,CAACwB,IAAI;QACxBC,WAAW,EAAE3B,QAAQ,CAACE,IAAI,CAACyB,WAAW;QACtCpB,YAAY,EAAEP,QAAQ,CAACE,IAAI,CAACK;MAC9B,CAAC;IACH;IAEA,MAAM,IAAIY,KAAK,CAAC,cAAc,CAAC;EACjC;;EAEA;EACA,MAAMS,QAAQA,CAACC,QAAQ,EAAE;IACvB,IAAI;MACF,MAAM7B,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAAC,gBAAgB,EAAE;QACxDgC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,QAAQ;MAC/B,CAAC,CAAC;MACF,OAAO7B,QAAQ;IACjB,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACd;MACA,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMc,MAAMA,CAAA,EAAG;IACb,IAAI;MACF,MAAM,IAAI,CAACxC,WAAW,CAAC,cAAc,EAAE;QACrCgC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC,CAAC,OAAON,KAAK,EAAE;MACd;MACAe,OAAO,CAACf,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C;EACF;;EAEA;EACA,MAAMgB,cAAcA,CAAA,EAAG;IACrB,MAAMhC,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAAC,UAAU,CAAC;IAEnD,IAAIU,QAAQ,CAACQ,OAAO,IAAIR,QAAQ,CAACE,IAAI,EAAE;MACrC,OAAOF,QAAQ,CAACE,IAAI,CAACwB,IAAI;IAC3B;IAEA,MAAM,IAAIP,KAAK,CAAC,yBAAyB,CAAC;EAC5C;;EAEA;EACA,MAAMZ,YAAYA,CAAA,EAAG;IACnB,MAAMA,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACzD,IAAI,CAACS,YAAY,EAAE;MACjB,OAAO;QAAEC,OAAO,EAAE;MAAM,CAAC;IAC3B;IAEA,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAAC,eAAe,EAAE;QACvDgC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAElB;QAAa,CAAC;MACvC,CAAC,CAAC;MAEF,IAAIP,QAAQ,CAACQ,OAAO,IAAIR,QAAQ,CAACE,IAAI,EAAE;QACrCL,YAAY,CAACoC,OAAO,CAAC,aAAa,EAAEjC,QAAQ,CAACE,IAAI,CAACyB,WAAW,CAAC;QAC9D9B,YAAY,CAACoC,OAAO,CAAC,cAAc,EAAEjC,QAAQ,CAACE,IAAI,CAACK,YAAY,CAAC;QAChE,OAAO;UAAEC,OAAO,EAAE;QAAK,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;IAEA,OAAO;MAAER,OAAO,EAAE;IAAM,CAAC;EAC3B;;EAEA;EACA,MAAM0B,cAAcA,CAACC,KAAK,EAAE;IAC1B,MAAMnC,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAAC,uBAAuB,EAAE;MAC/DgC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEU;MAAM,CAAC;IAChC,CAAC,CAAC;IAEF,IAAInC,QAAQ,CAACQ,OAAO,EAAE;MACpB,OAAO;QAAEA,OAAO,EAAE,IAAI;QAAEO,OAAO,EAAEf,QAAQ,CAACe;MAAQ,CAAC;IACrD;IAEA,MAAM,IAAII,KAAK,CAAC,4BAA4B,CAAC;EAC/C;;EAEA;EACA,MAAMiB,aAAaA,CAACxC,KAAK,EAAEyC,QAAQ,EAAE;IACnC,MAAMrC,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAAC,sBAAsB,EAAE;MAC9DgC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE7B,KAAK;QAAEyC;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAIrC,QAAQ,CAACQ,OAAO,EAAE;MACpB,OAAO;QAAEA,OAAO,EAAE,IAAI;QAAEO,OAAO,EAAEf,QAAQ,CAACe;MAAQ,CAAC;IACrD;IAEA,MAAM,IAAII,KAAK,CAAC,0BAA0B,CAAC;EAC7C;;EAEA;EACA,MAAMmB,aAAaA,CAACC,WAAW,EAAE;IAC/B,MAAMvC,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAAC,gBAAgB,EAAE;MACxDgC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACc,WAAW;IAClC,CAAC,CAAC;IAEF,IAAIvC,QAAQ,CAACQ,OAAO,IAAIR,QAAQ,CAACE,IAAI,EAAE;MACrC,OAAOF,QAAQ,CAACE,IAAI,CAACwB,IAAI;IAC3B;IAEA,MAAM,IAAIP,KAAK,CAAC,0BAA0B,CAAC;EAC7C;;EAEA;EACA,MAAMqB,cAAcA,CAACC,YAAY,EAAE;IACjC,MAAMzC,QAAQ,GAAG,MAAM,IAAI,CAACV,WAAW,CAAC,wBAAwB,EAAE;MAChEgC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACgB,YAAY;IACnC,CAAC,CAAC;IAEF,IAAIzC,QAAQ,CAACQ,OAAO,EAAE;MACpB,OAAO;QAAEA,OAAO,EAAE,IAAI;QAAEO,OAAO,EAAEf,QAAQ,CAACe;MAAQ,CAAC;IACrD;IAEA,MAAM,IAAII,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF;AAEA,OAAO,MAAMuB,OAAO,GAAG,IAAIvD,OAAO,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}